// GENERATED BY dbtogo (github.com/kdar/dbtogo); DO NOT EDIT
// ---args: /home/h4ck3rm1k3/goroot_sql/bin/kdb sqlite3 taginfo-wiki.db
package model

type Arger interface {
  Args() []interface{}
}

var InsertStmts = map[string]string{
  "Source":             "INSERT INTO Source (Id,Name,Updatestart,Updateend,Datauntil) VALUES (?, ?, ?, ?, ?)",
  "Wikipages":          "INSERT INTO Wikipages (Lang,Tag,Key,Value,Title,Body,Tgroup,Type,Hastempl,Parsed,Description,Image,Onnode,Onway,Onarea,Onrelation,Tagsimplies,Tagscombination,Tagslinked,Status) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
  "Relationpages":      "INSERT INTO Relationpages (Lang,Rtype,Title,Body,Tgroup,Type,Hastempl,Parsed,Description,Image,Tagslinked,Status) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
  "Wikiimages":         "INSERT INTO Wikiimages (Image,Width,Height,Size,Mime,Imageurl,Thumburlprefix,Thumburlsuffix) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
  "Wikipageskeys":      "INSERT INTO Wikipageskeys (Key,Langs,Langcount) VALUES (?, ?, ?)",
  "Wikipagestags":      "INSERT INTO Wikipagestags (Key,Value,Langs,Langcount) VALUES (?, ?, ?, ?)",
  "Wikilanguages":      "INSERT INTO Wikilanguages (Language,Countpages) VALUES (?, ?)",
  "Invalidpagetitles":  "INSERT INTO Invalidpagetitles (Reason,Title) VALUES (?, ?)",
  "Invalidimagetitles": "INSERT INTO Invalidimagetitles (Reason,Pagetitle,Imagetitle) VALUES (?, ?, ?)",
  "Words":              "INSERT INTO Words (Key,Value,Words) VALUES (?, ?, ?)",
  "Stats":              "INSERT INTO Stats (Key,Value) VALUES (?, ?)",
  "Sqlitestat1":        "INSERT INTO Sqlitestat1 (Tbl,Idx,Stat) VALUES (?, ?, ?)",
}
var SelectStmts = map[string]string{
  "Source":             "SELECT Id,Name,Updatestart,Updateend,Datauntil FROM Source",
  "Wikipages":          "SELECT Lang,Tag,Key,Value,Title,Body,Tgroup,Type,Hastempl,Parsed,Description,Image,Onnode,Onway,Onarea,Onrelation,Tagsimplies,Tagscombination,Tagslinked,Status FROM Wikipages",
  "Relationpages":      "SELECT Lang,Rtype,Title,Body,Tgroup,Type,Hastempl,Parsed,Description,Image,Tagslinked,Status FROM Relationpages",
  "Wikiimages":         "SELECT Image,Width,Height,Size,Mime,Imageurl,Thumburlprefix,Thumburlsuffix FROM Wikiimages",
  "Wikipageskeys":      "SELECT Key,Langs,Langcount FROM Wikipageskeys",
  "Wikipagestags":      "SELECT Key,Value,Langs,Langcount FROM Wikipagestags",
  "Wikilanguages":      "SELECT Language,Countpages FROM Wikilanguages",
  "Invalidpagetitles":  "SELECT Reason,Title FROM Invalidpagetitles",
  "Invalidimagetitles": "SELECT Reason,Pagetitle,Imagetitle FROM Invalidimagetitles",
  "Words":              "SELECT Key,Value,Words FROM Words",
  "Stats":              "SELECT Key,Value FROM Stats",
  "Sqlitestat1":        "SELECT Tbl,Idx,Stat FROM Sqlitestat1",
}

type Source struct {
  Id          string
  Name        string
  Updatestart string
  Updateend   string
  Datauntil   string
}

func (t *Source) Args() []interface{} {
  return []interface{}{&t.Id, &t.Name, &t.Updatestart, &t.Updateend, &t.Datauntil}
}

type Wikipages struct {
  Lang            string
  Tag             string
  Key             string
  Value           string
  Title           string
  Body            string
  Tgroup          string
  Type            string
  Hastempl        int64
  Parsed          int64
  Description     string
  Image           string
  Onnode          int64
  Onway           int64
  Onarea          int64
  Onrelation      int64
  Tagsimplies     string
  Tagscombination string
  Tagslinked      string
  Status          string
}

func (t *Wikipages) Args() []interface{} {
  return []interface{}{&t.Lang, &t.Tag, &t.Key, &t.Value, &t.Title, &t.Body, &t.Tgroup, &t.Type, &t.Hastempl, &t.Parsed, &t.Description, &t.Image, &t.Onnode, &t.Onway, &t.Onarea, &t.Onrelation, &t.Tagsimplies, &t.Tagscombination, &t.Tagslinked, &t.Status}
}

type Relationpages struct {
  Lang        string
  Rtype       string
  Title       string
  Body        string
  Tgroup      string
  Type        string
  Hastempl    int64
  Parsed      int64
  Description string
  Image       string
  Tagslinked  string
  Status      string
}

func (t *Relationpages) Args() []interface{} {
  return []interface{}{&t.Lang, &t.Rtype, &t.Title, &t.Body, &t.Tgroup, &t.Type, &t.Hastempl, &t.Parsed, &t.Description, &t.Image, &t.Tagslinked, &t.Status}
}

type Wikiimages struct {
  Image          string
  Width          int64
  Height         int64
  Size           int64
  Mime           string
  Imageurl       string
  Thumburlprefix string
  Thumburlsuffix string
}

func (t *Wikiimages) Args() []interface{} {
  return []interface{}{&t.Image, &t.Width, &t.Height, &t.Size, &t.Mime, &t.Imageurl, &t.Thumburlprefix, &t.Thumburlsuffix}
}

type Wikipageskeys struct {
  Key       string
  Langs     string
  Langcount int64
}

func (t *Wikipageskeys) Args() []interface{} { return []interface{}{&t.Key, &t.Langs, &t.Langcount} }

type Wikipagestags struct {
  Key       string
  Value     string
  Langs     string
  Langcount int64
}

func (t *Wikipagestags) Args() []interface{} {
  return []interface{}{&t.Key, &t.Value, &t.Langs, &t.Langcount}
}

type Wikilanguages struct {
  Language   string
  Countpages int64
}

func (t *Wikilanguages) Args() []interface{} { return []interface{}{&t.Language, &t.Countpages} }

type Invalidpagetitles struct {
  Reason string
  Title  string
}

func (t *Invalidpagetitles) Args() []interface{} { return []interface{}{&t.Reason, &t.Title} }

type Invalidimagetitles struct {
  Reason     string
  Pagetitle  string
  Imagetitle string
}

func (t *Invalidimagetitles) Args() []interface{} {
  return []interface{}{&t.Reason, &t.Pagetitle, &t.Imagetitle}
}

type Words struct {
  Key   string
  Value string
  Words string
}

func (t *Words) Args() []interface{} { return []interface{}{&t.Key, &t.Value, &t.Words} }

type Stats struct {
  Key   string
  Value string
}

func (t *Stats) Args() []interface{} { return []interface{}{&t.Key, &t.Value} }

type Sqlitestat1 struct {
  Tbl  string
  Idx  string
  Stat string
}

func (t *Sqlitestat1) Args() []interface{} { return []interface{}{&t.Tbl, &t.Idx, &t.Stat} }
