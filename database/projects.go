// GENERATED BY dbtogo (github.com/kdar/dbtogo); DO NOT EDIT
// ---args: /home/h4ck3rm1k3/goroot_sql/bin/kdb sqlite3 taginfo-projects.db
package model

type Arger interface {
  Args() []interface{}
}

var InsertStmts = map[string]string{
  "Source":        "INSERT INTO Source (Id,Name,Updatestart,Updateend,Datauntil) VALUES (?, ?, ?, ?, ?)",
  "Stats":         "INSERT INTO Stats (Key,Value) VALUES (?, ?)",
  "Projects":      "INSERT INTO Projects (Id,Jsonurl,Lastmodified,Fetchdate,Fetchstatus,Fetchjson,Status,Errorlog,Dataformat,Dataupdated,Dataurl,Name,Description,Projecturl,Docurl,Iconurl,Contactname,Contactemail,Keywords) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
  "Projecttags":   "INSERT INTO Projecttags (Projectid,Key,Value,Onnode,Onway,Onrelation,Onarea,Description,Docurl,Iconurl,Keywords) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
  "Projectcounts": "INSERT INTO Projectcounts (Key,Value,Num) VALUES (?, ?, ?)",
  "Sqlitestat1":   "INSERT INTO Sqlitestat1 (Tbl,Idx,Stat) VALUES (?, ?, ?)",
}
var SelectStmts = map[string]string{
  "Source":        "SELECT Id,Name,Updatestart,Updateend,Datauntil FROM Source",
  "Stats":         "SELECT Key,Value FROM Stats",
  "Projects":      "SELECT Id,Jsonurl,Lastmodified,Fetchdate,Fetchstatus,Fetchjson,Status,Errorlog,Dataformat,Dataupdated,Dataurl,Name,Description,Projecturl,Docurl,Iconurl,Contactname,Contactemail,Keywords FROM Projects",
  "Projecttags":   "SELECT Projectid,Key,Value,Onnode,Onway,Onrelation,Onarea,Description,Docurl,Iconurl,Keywords FROM Projecttags",
  "Projectcounts": "SELECT Key,Value,Num FROM Projectcounts",
  "Sqlitestat1":   "SELECT Tbl,Idx,Stat FROM Sqlitestat1",
}

type Source struct {
  Id          string
  Name        string
  Updatestart string
  Updateend   string
  Datauntil   string
}

func (t *Source) Args() []interface{} {
  return []interface{}{&t.Id, &t.Name, &t.Updatestart, &t.Updateend, &t.Datauntil}
}

type Stats struct {
  Key   string
  Value string
}

func (t *Stats) Args() []interface{} { return []interface{}{&t.Key, &t.Value} }

type Projects struct {
  Id           string
  Jsonurl      string
  Lastmodified float64
  Fetchdate    float64
  Fetchstatus  string
  Fetchjson    string
  Status       string
  Errorlog     string
  Dataformat   int64
  Dataupdated  float64
  Dataurl      string
  Name         string
  Description  string
  Projecturl   string
  Docurl       string
  Iconurl      string
  Contactname  string
  Contactemail string
  Keywords     string
}

func (t *Projects) Args() []interface{} {
  return []interface{}{&t.Id, &t.Jsonurl, &t.Lastmodified, &t.Fetchdate, &t.Fetchstatus, &t.Fetchjson, &t.Status, &t.Errorlog, &t.Dataformat, &t.Dataupdated, &t.Dataurl, &t.Name, &t.Description, &t.Projecturl, &t.Docurl, &t.Iconurl, &t.Contactname, &t.Contactemail, &t.Keywords}
}

type Projecttags struct {
  Projectid   string
  Key         string
  Value       string
  Onnode      int64
  Onway       int64
  Onrelation  int64
  Onarea      int64
  Description string
  Docurl      string
  Iconurl     string
  Keywords    string
}

func (t *Projecttags) Args() []interface{} {
  return []interface{}{&t.Projectid, &t.Key, &t.Value, &t.Onnode, &t.Onway, &t.Onrelation, &t.Onarea, &t.Description, &t.Docurl, &t.Iconurl, &t.Keywords}
}

type Projectcounts struct {
  Key   string
  Value string
  Num   int64
}

func (t *Projectcounts) Args() []interface{} { return []interface{}{&t.Key, &t.Value, &t.Num} }

type Sqlitestat1 struct {
  Tbl  string
  Idx  string
  Stat string
}

func (t *Sqlitestat1) Args() []interface{} { return []interface{}{&t.Tbl, &t.Idx, &t.Stat} }
