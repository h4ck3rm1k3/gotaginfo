// GENERATED BY dbtogo (github.com/kdar/dbtogo)
// but edited by mike. do not regenerate
// ---args: /home/h4ck3rm1k3/goroot_sql/bin/kdb sqlite3 
package taginfo_model

const DBName = "taginfo-db.db"

type Arger interface {
  Args() []interface{}
}

var InsertStmts = map[string]string{
  "Source":                "INSERT INTO Source (Id,Name,Updatestart,Updateend,Datauntil) VALUES (?, ?, ?, ?, ?)",
  "Stats":                 "INSERT INTO Stats (Key,Value) VALUES (?, ?)",
  "Keys":                  "INSERT INTO Keys (Key,Countall,Countnodes,Countways,Countrelations,Valuesall,Valuesnodes,Valuesways,Valuesrelations,Usersall,Usersnodes,Usersways,Usersrelations,Cellsnodes,Cellsways,Inwiki,Inprojects,Characters) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
  "Prevalentvalues":       "INSERT INTO Prevalentvalues (Key,Value,Count,Fraction) VALUES (?, ?, ?, ?)",
  "Keydistributions":      "INSERT INTO Keydistributions (Key,Objecttype,Png) VALUES (?, ?, ?)",
  "Similarkeys":           "INSERT INTO Similarkeys (Key1,Key2,Countall1,Countall2,Similarity) VALUES (?, ?, ?, ?, ?)",
  "Tagdistributions":      "INSERT INTO Tagdistributions (Key,Value,Objecttype,Png) VALUES (?, ?, ?, ?)",
  "Tags":                  "INSERT INTO Tags (Key,Value,Countall,Countnodes,Countways,Countrelations,Inwiki,Inprojects) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
  "Keycombinations":       "INSERT INTO Keycombinations (Key1,Key2,Countall,Countnodes,Countways,Countrelations) VALUES (?, ?, ?, ?, ?, ?)",
  "Tagcombinations":       "INSERT INTO Tagcombinations (Key1,Value1,Key2,Value2,Countall,Countnodes,Countways,Countrelations) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
  "Relationtypes":         "INSERT INTO Relationtypes (Rtype,Count,Membersall,Membersnodes,Membersways,Membersrelations) VALUES (?, ?, ?, ?, ?, ?)",
  "Relationroles":         "INSERT INTO Relationroles (Rtype,Role,Countall,Countnodes,Countways,Countrelations) VALUES (?, ?, ?, ?, ?, ?)",
  "Prevalentroles":        "INSERT INTO Prevalentroles (Rtype,Role,Count,Fraction) VALUES (?, ?, ?, ?)",
  "Sqlitestat1":           "INSERT INTO Sqlitestat1 (Tbl,Idx,Stat) VALUES (?, ?, ?)",
  "Similarkeyscommonrare": "INSERT INTO Similarkeyscommonrare (Keycommon,Keyrare,Countallcommon,Countallrare,Similarity) VALUES (?, ?, ?, ?, ?)",
}
var SelectStmts = map[string]string{
  "Source":                "SELECT Id,Name,Updatestart,Updateend,Datauntil FROM Source",
  "Stats":                 "SELECT Key,Value FROM Stats",
  "Keys":                  "SELECT Key,Countall,Countnodes,Countways,Countrelations,Valuesall,Valuesnodes,Valuesways,Valuesrelations,Usersall,Usersnodes,Usersways,Usersrelations,Cellsnodes,Cellsways,Inwiki,Inprojects,Characters FROM Keys",
  "Prevalentvalues":       "SELECT Key,Value,Count,Fraction FROM Prevalentvalues",
  "Keydistributions":      "SELECT Key,Objecttype,Png FROM Keydistributions",
  "Similarkeys":           "SELECT Key1,Key2,Countall1,Countall2,Similarity FROM Similarkeys",
  "Tagdistributions":      "SELECT Key,Value,Objecttype,Png FROM Tagdistributions",
  "Tags":                  "SELECT Key,Value,Countall,Countnodes,Countways,Countrelations,Inwiki,Inprojects FROM Tags",
  "Keycombinations":       "SELECT Key1,Key2,Countall,Countnodes,Countways,Countrelations FROM Keycombinations",
  "Tagcombinations":       "SELECT Key1,Value1,Key2,Value2,Countall,Countnodes,Countways,Countrelations FROM Tagcombinations",
  "Relationtypes":         "SELECT Rtype,Count,Membersall,Membersnodes,Membersways,Membersrelations FROM Relationtypes",
  "Relationroles":         "SELECT Rtype,Role,Countall,Countnodes,Countways,Countrelations FROM Relationroles",
  "Prevalentroles":        "SELECT Rtype,Role,Count,Fraction FROM Prevalentroles",
  "Sqlitestat1":           "SELECT Tbl,Idx,Stat FROM Sqlitestat1",
  "Similarkeyscommonrare": "SELECT Keycommon,Keyrare,Countallcommon,Countallrare,Similarity FROM Similarkeyscommonrare",
}

type Source struct {
  Id          string
  Name        string
  Updatestart string
  Updateend   string
  Datauntil   string
}

func (t *Source) Args() []interface{} {
  return []interface{}{&t.Id, &t.Name, &t.Updatestart, &t.Updateend, &t.Datauntil}
}

type Stats struct {
  Key   string
  Value string
}

func (t *Stats) Args() []interface{} { return []interface{}{&t.Key, &t.Value} }



type Keys struct {

  Key             string
  Countall        int64
  Countnodes      int64
  Countways       int64
  Countrelations  int64
  Valuesall       int64
  Valuesnodes     int64
  Valuesways      int64
  Valuesrelations int64
  Usersall        int64
  Usersnodes      int64
  Usersways       int64
  Usersrelations  int64
  Cellsnodes      int64
  Cellsways       int64
  Inwiki          int64
  Inprojects      int64
  Characters      string
}

func (t Keys) TableName() string {
	const KeyTableName  = "keys"
	return KeyTableName
}


func (t *Keys) Args() []interface{} {
  return []interface{}{&t.Key, &t.Countall, &t.Countnodes, &t.Countways, &t.Countrelations, &t.Valuesall, &t.Valuesnodes, &t.Valuesways, &t.Valuesrelations, &t.Usersall, &t.Usersnodes, &t.Usersways, &t.Usersrelations, &t.Cellsnodes, &t.Cellsways, &t.Inwiki, &t.Inprojects, &t.Characters}
}

type Prevalentvalues struct {
  Key      string
  Value    string
  Count    int64
  Fraction float64
}

func (t *Prevalentvalues) Args() []interface{} {
  return []interface{}{&t.Key, &t.Value, &t.Count, &t.Fraction}
}

type Keydistributions struct {
  Key        string
  Objecttype string
  Png        string
}

func (t *Keydistributions) Args() []interface{} { return []interface{}{&t.Key, &t.Objecttype, &t.Png} }

type Similarkeys struct {
  Key1       string
  Key2       string
  Countall1  int64
  Countall2  int64
  Similarity int64
}

func (t *Similarkeys) Args() []interface{} {
  return []interface{}{&t.Key1, &t.Key2, &t.Countall1, &t.Countall2, &t.Similarity}
}

type Tagdistributions struct {
  Key        string
  Value      string
  Objecttype string
  Png        string
}

func (t *Tagdistributions) Args() []interface{} {
  return []interface{}{&t.Key, &t.Value, &t.Objecttype, &t.Png}
}

type Tags struct {
  Key            string
  Value          string
  Countall       int64
  Countnodes     int64
  Countways      int64
  Countrelations int64
  Inwiki         int64
  Inprojects     int64
}

func (t *Tags) Args() []interface{} {
  return []interface{}{&t.Key, &t.Value, &t.Countall, &t.Countnodes, &t.Countways, &t.Countrelations, &t.Inwiki, &t.Inprojects}
}

type Keycombinations struct {
  Key1           string
  Key2           string
  Countall       int64
  Countnodes     int64
  Countways      int64
  Countrelations int64
}

func (t *Keycombinations) Args() []interface{} {
  return []interface{}{&t.Key1, &t.Key2, &t.Countall, &t.Countnodes, &t.Countways, &t.Countrelations}
}

type Tagcombinations struct {
  Key1           string
  Value1         string
  Key2           string
  Value2         string
  Countall       int64
  Countnodes     int64
  Countways      int64
  Countrelations int64
}

func (t *Tagcombinations) Args() []interface{} {
  return []interface{}{&t.Key1, &t.Value1, &t.Key2, &t.Value2, &t.Countall, &t.Countnodes, &t.Countways, &t.Countrelations}
}

type Relationtypes struct {
  Rtype            string
  Count            int64
  Membersall       int64
  Membersnodes     int64
  Membersways      int64
  Membersrelations int64
}

func (t *Relationtypes) Args() []interface{} {
  return []interface{}{&t.Rtype, &t.Count, &t.Membersall, &t.Membersnodes, &t.Membersways, &t.Membersrelations}
}

type Relationroles struct {
  Rtype          string
  Role           string
  Countall       int64
  Countnodes     int64
  Countways      int64
  Countrelations int64
}

func (t *Relationroles) Args() []interface{} {
  return []interface{}{&t.Rtype, &t.Role, &t.Countall, &t.Countnodes, &t.Countways, &t.Countrelations}
}

type Prevalentroles struct {
  Rtype    string
  Role     string
  Count    int64
  Fraction float64
}

func (t *Prevalentroles) Args() []interface{} {
  return []interface{}{&t.Rtype, &t.Role, &t.Count, &t.Fraction}
}

type Sqlitestat1 struct {
  Tbl  string
  Idx  string
  Stat string
}

func (t *Sqlitestat1) Args() []interface{} { return []interface{}{&t.Tbl, &t.Idx, &t.Stat} }

type Similarkeyscommonrare struct {
  Keycommon      string
  Keyrare        string
  Countallcommon int64
  Countallrare   int64
  Similarity     int64
}

func (t *Similarkeyscommonrare) Args() []interface{} {
  return []interface{}{&t.Keycommon, &t.Keyrare, &t.Countallcommon, &t.Countallrare, &t.Similarity}
}
